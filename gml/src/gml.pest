COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/"
           | "//" ~ (!NEWLINE ~ ANY)* }
WHITESPACE = _{ " " | NEWLINE }
tokens = _{ SOI ~ token* ~ EOI }
script = _{ SOI ~ stmt* ~ EOI }

// statements
stmt              = _{ if_stmt
                     | repeat_stmt
                     | while_stmt
                     | for_stmt
                     | with_stmt
                     | return_stmt
                     | exit_stmt
                     | block_stmt
                     | var_stmt
                     | assign_stmt
                     | expr_stmt
                     | empty_stmt }
  if_stmt         = { kw_if ~ expr ~ stmt
                    ~ (kw_else ~ kw_if ~ expr ~ stmt)* // flatten long else-if chains
                    ~ (kw_else ~ stmt)? }
    kw_if         = @{ "if" ~ !id_cont }
    kw_else       = @{ "else" ~ !id_cont }
  repeat_stmt     = { kw_repeat ~ expr ~ stmt }
    kw_repeat     = @{ "repeat" ~ !id_cont }
  while_stmt      = { kw_while ~ expr ~ stmt }
    kw_while      = @{ "while" ~ !id_cont }
  for_stmt        = { kw_for ~ "(" ~ assign_expr ~ ";" ~
                      expr ~ ";" ~ (assign_expr | expr) ~ ")" ~ stmt }
    kw_for        = @{ "for" ~ !id_cont }
  with_stmt       = { kw_with ~ expr ~ stmt }
    kw_with       = @{ "with" ~ !id_cont }
  return_stmt     = { kw_return ~ expr ~ sep }
    kw_return     = @{ "return" ~ !id_cont }
  exit_stmt       = { kw_exit ~ sep }
    kw_exit       = @{ "exit" ~ !id_cont }
  block_stmt      = { "{" ~ stmt* ~ "}" }
  var_stmt        = { kw_var ~ id ~ sep }
    kw_var        = @{ "var" ~ !id_cont }
  assign_stmt     = { assign_expr ~ sep }
  expr_stmt       = { expr ~ sep }
  empty_stmt      = { ";" } // can't use sep or it would match empty

sep               = _{ ";"? }

assign_expr       = { assign_lhs ~ assign_op ~ expr }
  assign_lhs      = { var ~ (member | index)* | assign_id_property }
    assign_id_property = { "(" ~ expr ~ ")" ~ "." ~ id }
  assign_op       = _{ assign | add_assign | sub_assign | mul_assign | div_assign }
    assign        = { "=" }
    add_assign    = { "+=" }
    sub_assign    = { "-=" }
    mul_assign    = { "*=" }
    div_assign    = { "/=" }

// exprs (uses PrattParser)
expr          = { prefix* ~ primary ~ postfix* ~ (infix ~ prefix* ~ primary ~ postfix*)* }
  prefix      = _{ not | pos | neg | bit_not | pre_incr | pre_decr }
    not       = @{ "!" }
    pos       = @{ "+" }
    neg       = @{ "-" }
    bit_not   = @{ "~" }
    pre_incr  = @{ "++" }
    pre_decr  = @{ "--" }
  infix       = _{ and | or | xor
                 | bit_and | bit_or | bit_xor
                 | le | lt | ge | gt | ne | eq
                 | add | sub | mul | div | idiv | imod }
    and       = @{ "&&" | "and" ~ !id_cont }
    or        = @{ "||" | "or" ~ !id_cont }
    xor       = @{ "^^" }
    bit_and   = @{ "&" }
    bit_or    = @{ "|" }
    bit_xor   = @{ "^" }
    le        = @{ "<=" }
    lt        = @{ "<" }
    ge        = @{ ">=" }
    gt        = @{ ">" }
    ne        = @{ "!=" }
    eq        = @{ "==" | "=" }
    add       = @{ "+" }
    sub       = @{ "-" }
    mul       = @{ "*" }
    div       = @{ "/" }
    idiv      = @{ "div" ~ !id_cont }
    imod      = @{ "%" | "mod" ~ !id_cont }
  postfix     = _{ member | index | post_incr | post_decr }
    member    = { "." ~ id }
    index     = { "[" ~ expr_list ~ "]" }
    post_incr = @{ "++" }
    post_decr = @{ "--" }
primary = _{ "(" ~ expr ~ ")" | call_expr | var | float | int | str }

var = { (global ~ "." )? ~ id }
  global = @{ "global" ~ !id_cont }

call_expr = { id ~ "(" ~ expr_list? ~ ")" }
expr_list = _{ expr ~ ("," ~ expr)* }


// tokens
token = { keyword | id | float | int | str | op }
keyword = @{ ("if" | "else" | "for" | "repeat" | "with" | "var" | "global"
             | "do" | "until" | "switch" | "break" | "continue" | "exit"
             | "begin" | "end"
// not yet supported in GM 7, breaks a few scripts that use try as a variable name.
//              | "try" | "catch" | "finally" | "throw" | "new" | "delete"
             | "and" | "or" | "div" | "mod" | "return")
           ~ !ASCII_ALPHANUMERIC
           }
op = @{ "&&" | "&" | "||" | "|" | "^^" | "^"
      | "<=" | "<<" | "<" | ">=" | ">>" | ">"
      | "++" | "+" | "--" | "-" | "*" | "/"
      | "==" | "=" | "!=" | "!"
      | ";" | "." | ","
      | "(" | ")" | "{" | "}" | "[" | "]" }
id = @{ !keyword ~ ("_" | ASCII_ALPHA) ~ id_cont* }
id_cont = @{ "_" | ASCII_ALPHANUMERIC }
float = @{ ASCII_DIGIT* ~ "." ~ ASCII_DIGIT+ }
int = @{ ASCII_DIGIT+ }
str = @{ "\"" ~ (!"\"" ~ ANY | "\\\"")* ~ "\"" }
